using _310NutritionAPI.Models;
using _310NutritionAPI.Models.DTO;
using _310NutritionAPI.Repository.IRepository;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using System.Net;

namespace _310NutritionAPI.Controllers
{
    [Route("api/ProductAPI")]
    [ApiController]
    public class ProductAPIController:ControllerBase
    {
        protected APIResponse _response;
        private readonly IProductRepository _dbProducts;
        private readonly IMapper _mapper;
        public ProductAPIController(IProductRepository repository, IMapper mapper)
        {
            this._response = new();
            _dbProducts = repository;
            _mapper = mapper;
        }
        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<ActionResult<APIResponse>> GetProducts()
        {
            try { 
                IEnumerable<Product> productList = await _dbProducts.GetAllAsync();
                _response.Result = _mapper.Map<List<ProductDTO>>(productList);
                _response.StatusCode = HttpStatusCode.OK;
                return Ok(_response);
            }catch(Exception ex)
            {
                _response.IsSuccess = false;
                _response.ErrorMessages = new List<string>() { ex.ToString() };
                return _response;
            }
        }
        [HttpGet("{id:int}", Name ="GetProduct")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<APIResponse>> GetProduct(int id)
        {
            try
            {
                if (id == 0)
                {
                    _response.StatusCode = HttpStatusCode.BadRequest;
                    return BadRequest(_response);
                }
                //this is the equivalent to running a SQL get from product where product.id = id
                var product = await _dbProducts.GetAsync((p => p.Id == id), includeProperties:"Variants");

                if (product == null)
                {
                    _response.StatusCode = HttpStatusCode.NotFound;
                    return NotFound(_response);
                }
                var productDTO = _mapper.Map<ProductDTO>(product);
                productDTO.Variants = _mapper.Map<List<Variant>>(product.Variants);
                _response.Result = productDTO;
                _response.StatusCode = HttpStatusCode.OK;
                return Ok(_response);
            }
            catch (Exception ex) {
                _response.IsSuccess = false;
                _response.ErrorMessages = new List<string>() { ex.ToString() };
                return _response;
            }
        }
        [HttpGet("{handle}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<APIResponse>> GetProductByHandle(string handle)
        {
            try
            {
                if (handle == "")
                {
                    _response.StatusCode = HttpStatusCode.BadRequest;
                    return BadRequest(_response);
                }
                var product = await _dbProducts.GetAsync(p => p.Handle.ToLower() == handle.ToLower(), includeProperties: "Variants");
                if (product == null)
                {
                    _response.StatusCode = HttpStatusCode.NotFound;
                    return NotFound(_response);
                }
                var productDTO = _mapper.Map<ProductDTO>(product);
                productDTO.Variants = _mapper.Map<List<Variant>>(product.Variants);
                _response.Result = productDTO;
                _response.StatusCode = HttpStatusCode.OK;
                return Ok(_response);
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.ErrorMessages = new List<string>() { ex.ToString() };
                return _response;
            }
        }
        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<ActionResult<APIResponse>> CreateProduct([FromBody] ProductCreateDTO createDTO){
            try{
                //if found product by handle, the product already exists, handle must change
                if (await _dbProducts.GetAsync(product => product.Handle.ToLower() == createDTO.Handle.ToLower()) != null) {
                    ModelState.AddModelError("ErrorMessages", "Product Already Exists");
                    return BadRequest(ModelState);
                }
                if(!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
                if (createDTO == null) {
                    return BadRequest(createDTO);
                }
                //if not bad req
                Product product = _mapper.Map<Product>(createDTO);
                await _dbProducts.CreateAsync(product);
                _response.Result = _mapper.Map<ProductDTO>(product);
                _response.StatusCode = HttpStatusCode.OK;
                return CreatedAtRoute("GetProduct", new { id = product.Id }, _response);
            }catch(Exception ex)
            {
                _response.IsSuccess = false;
                _response.ErrorMessages = new List<string>() { ex.ToString() };
                return _response;
            }
        }
        [HttpPut("{id:int}", Name = "UpdateProduct")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<ActionResult<APIResponse>> UpdateProduct(int id, [FromBody] ProductUpdateDTO updateDTO) {
            try
            {
                if (updateDTO == null || id != updateDTO.Id)
                {
                    return BadRequest(ModelState);
                }
                //if handle already exists in db
                Product product = _mapper.Map<Product>(updateDTO);
                await _dbProducts.UpdateAsync(product);
                _response.StatusCode = HttpStatusCode.NoContent;
                _response.IsSuccess = true;
                return Ok(_response);
            }
            catch(Exception ex) { 
                _response.StatusCode = HttpStatusCode.BadRequest;
                _response.ErrorMessages = new List<string>() { ex.ToString() };
                return _response;
            }
        }
        [HttpDelete("{id:int}", Name = "DeleteProduct")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<ActionResult<APIResponse>> DeleteProduct(int id)
        {
            try { 
                if(id == 0)
                {
                    return BadRequest();
                }
                var product = await _dbProducts.GetAsync(u => u.Id == id);
                if (product == null) {
                    return NotFound();
                }
                await _dbProducts.RemoveAsync(product);
                _response.StatusCode = HttpStatusCode.NoContent;
                _response.IsSuccess = true;
                return Ok(_response);
            }
            catch(Exception ex)
            {
                _response.IsSuccess = false;
                _response.ErrorMessages = new List<string>() { ex.ToString() };
                return _response;
            }
        }
    }
}
